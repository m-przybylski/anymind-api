/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class PaymentsApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Create PayPal future payment
   * @param body Create future payment
   */
  public createFuturePaymentRoute(
    body: models.CreatePayment,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayment> {
    const localVarPath = this.basePath + '/api/payments/paypal/create-future-payment';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createFuturePaymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create internal payment
   * @param body Create payment
   */
  public createInternalPaymentRoute(
    body: models.PostPayment,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.PaymentId> {
    const localVarPath = this.basePath + '/api/payments/paypal/create-internal-payment';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createInternalPaymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create PayPal payment
   * @param body Create payment
   */
  public createPaymentRoute(
    body: models.CreatePayment,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayment> {
    const localVarPath = this.basePath + '/api/payments/paypal/create-payment';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createPaymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Delete credit card
   * @param creditCardId creditCardId
   */
  public deleteCreditCardRoute(
    creditCardId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.Function1RequestContextFutureRouteResult> {
    const localVarPath =
      this.basePath +
      '/api/payments/tpay/credit-card/{creditCardId}'.replace('{' + 'creditCardId' + '}', String(creditCardId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'creditCardId' is not null or undefined
    if (creditCardId === null || creditCardId === undefined) {
      throw new Error('Required parameter creditCardId was null or undefined when calling deleteCreditCardRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Execute PayPal payment
   * @param body Execute payment
   */
  public executePaymentRoute(
    body: models.ExecutePayment,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayment> {
    const localVarPath = this.basePath + '/api/payments/paypal/execute-payment';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling executePaymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get credit cards
   */
  public getCreditCardsRoute(extraHttpRequestParams?: any): ng.IHttpPromise<Array<models.GetCreditCard>> {
    const localVarPath = this.basePath + '/api/payments/tpay/credit-cards';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get default payment method
   */
  public getDefaultPaymentMethodRoute(extraHttpRequestParams?: any): ng.IHttpPromise<models.DefaultCreditCard> {
    const localVarPath = this.basePath + '/api/payments/default-payment-method';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get payu payment links
   */
  public getPayUPaymentLinksRoute(extraHttpRequestParams?: any): ng.IHttpPromise<Array<models.PaymentLink>> {
    const localVarPath = this.basePath + '/api/payments/payu/payment-links';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get payment options
   */
  public getPaymentOptionsRoute(extraHttpRequestParams?: any): ng.IHttpPromise<models.GetPaymentOptions> {
    const localVarPath = this.basePath + '/api/payments/options';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Add new credit card
   * @param body New card&#39;s data
   */
  public postCreditCardRoute(
    body: models.PostAddNewCard,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.ThreeDSecureUrl> {
    const localVarPath = this.basePath + '/api/payments/tpay/credit-card';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postCreditCardRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create order
   * @param body Order request
   */
  public postPayUOrderRoute(body: models.PostOrder, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetOrder> {
    const localVarPath = this.basePath + '/api/payments/payu/order';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postPayUOrderRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Change default payment method
   * @param body ChangeDefaultCreditCard
   */
  public putDefaultPaymentMethodRoute(
    body?: models.ChangeDefaultCreditCard,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/payments/default-payment-method';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Verify PayPal payment
   * @param body Verify payment
   */
  public verifyPaymentRoute(
    body: models.VerifyPayment,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayment> {
    const localVarPath = this.basePath + '/api/payments/paypal/verify-payment';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling verifyPaymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
