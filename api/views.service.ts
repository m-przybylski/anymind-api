/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GetActivities } from '../model/getActivities';
import { GetActivityFilters } from '../model/getActivityFilters';
import { GetCallDetails } from '../model/getCallDetails';
import { GetDashboardClientExperts } from '../model/getDashboardClientExperts';
import { GetExpertProfile } from '../model/getExpertProfile';
import { GetMobileServiceDetails } from '../model/getMobileServiceDetails';
import { GetOrganizationProfile } from '../model/getOrganizationProfile';
import { GetSimpleExpertProfile } from '../model/getSimpleExpertProfile';
import { GetSimpleOrganizationProfile } from '../model/getSimpleOrganizationProfile';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ViewsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get dashboard activities
     * 
     * @param activityType ActivityType
     * @param profileId AccountId
     * @param serviceId ServiceId
     * @param accountType FinancialAccountType
     * @param dateFrom Instant
     * @param dateTo Instant
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDashboardActivitiesRoute(activityType?: string, profileId?: string, serviceId?: string, accountType?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<GetActivities>;
    public getDashboardActivitiesRoute(activityType?: string, profileId?: string, serviceId?: string, accountType?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetActivities>>;
    public getDashboardActivitiesRoute(activityType?: string, profileId?: string, serviceId?: string, accountType?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetActivities>>;
    public getDashboardActivitiesRoute(activityType?: string, profileId?: string, serviceId?: string, accountType?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activityType !== undefined) {
            queryParameters = queryParameters.set('activityType', <any>activityType);
        }
        if (profileId !== undefined) {
            queryParameters = queryParameters.set('profileId', <any>profileId);
        }
        if (serviceId !== undefined) {
            queryParameters = queryParameters.set('serviceId', <any>serviceId);
        }
        if (accountType !== undefined) {
            queryParameters = queryParameters.set('accountType', <any>accountType);
        }
        if (dateFrom !== undefined) {
            queryParameters = queryParameters.set('dateFrom', <any>dateFrom);
        }
        if (dateTo !== undefined) {
            queryParameters = queryParameters.set('dateTo', <any>dateTo);
        }
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetActivities>(`${this.basePath}/views/dashboard/activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get dashboard activity filters
     * 
     * @param accountType accountType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDashboardActivityFiltersRoute(accountType: string, observe?: 'body', reportProgress?: boolean): Observable<GetActivityFilters>;
    public getDashboardActivityFiltersRoute(accountType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetActivityFilters>>;
    public getDashboardActivityFiltersRoute(accountType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetActivityFilters>>;
    public getDashboardActivityFiltersRoute(accountType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountType === null || accountType === undefined) {
            throw new Error('Required parameter accountType was null or undefined when calling getDashboardActivityFiltersRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetActivityFilters>(`${this.basePath}/views/dashboard/activities/filters/${encodeURIComponent(String(accountType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get service usage event details
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDashboardCallDetailsRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<GetCallDetails>;
    public getDashboardCallDetailsRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetCallDetails>>;
    public getDashboardCallDetailsRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetCallDetails>>;
    public getDashboardCallDetailsRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling getDashboardCallDetailsRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetCallDetails>(`${this.basePath}/views/dashboard/sue/${encodeURIComponent(String(sueId))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client dashboard
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDashboardClientExpertsRoute(observe?: 'body', reportProgress?: boolean): Observable<GetDashboardClientExperts>;
    public getDashboardClientExpertsRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetDashboardClientExperts>>;
    public getDashboardClientExpertsRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetDashboardClientExperts>>;
    public getDashboardClientExpertsRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetDashboardClientExperts>(`${this.basePath}/views/dashboard/client/experts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get simple expert profile
     * 
     * @param profileId profileId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMobileExpertProfileRoute(profileId: string, observe?: 'body', reportProgress?: boolean): Observable<GetSimpleExpertProfile>;
    public getMobileExpertProfileRoute(profileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSimpleExpertProfile>>;
    public getMobileExpertProfileRoute(profileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSimpleExpertProfile>>;
    public getMobileExpertProfileRoute(profileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getMobileExpertProfileRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetSimpleExpertProfile>(`${this.basePath}/views/mobile/profile/${encodeURIComponent(String(profileId))}/expert`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get simple organization profile
     * 
     * @param profileId profileId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMobileOrganizationProfileRoute(profileId: string, observe?: 'body', reportProgress?: boolean): Observable<GetSimpleOrganizationProfile>;
    public getMobileOrganizationProfileRoute(profileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSimpleOrganizationProfile>>;
    public getMobileOrganizationProfileRoute(profileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSimpleOrganizationProfile>>;
    public getMobileOrganizationProfileRoute(profileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getMobileOrganizationProfileRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetSimpleOrganizationProfile>(`${this.basePath}/views/mobile/profile/${encodeURIComponent(String(profileId))}/organization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get service details
     * 
     * @param serviceId serviceId
     * @param commentsLimit Comments limit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMobileServiceDetailsRoute(serviceId: string, commentsLimit: string, observe?: 'body', reportProgress?: boolean): Observable<GetMobileServiceDetails>;
    public getMobileServiceDetailsRoute(serviceId: string, commentsLimit: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetMobileServiceDetails>>;
    public getMobileServiceDetailsRoute(serviceId: string, commentsLimit: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetMobileServiceDetails>>;
    public getMobileServiceDetailsRoute(serviceId: string, commentsLimit: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling getMobileServiceDetailsRoute.');
        }
        if (commentsLimit === null || commentsLimit === undefined) {
            throw new Error('Required parameter commentsLimit was null or undefined when calling getMobileServiceDetailsRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (commentsLimit !== undefined) {
            queryParameters = queryParameters.set('commentsLimit', <any>commentsLimit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetMobileServiceDetails>(`${this.basePath}/views/mobile/service/${encodeURIComponent(String(serviceId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get full expert profile
     * 
     * @param profileId profileId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWebExpertProfileRoute(profileId: string, observe?: 'body', reportProgress?: boolean): Observable<GetExpertProfile>;
    public getWebExpertProfileRoute(profileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetExpertProfile>>;
    public getWebExpertProfileRoute(profileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetExpertProfile>>;
    public getWebExpertProfileRoute(profileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getWebExpertProfileRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetExpertProfile>(`${this.basePath}/views/profile/${encodeURIComponent(String(profileId))}/expert`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get full organization profile
     * 
     * @param profileId profileId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWebOrganizationProfileRoute(profileId: string, observe?: 'body', reportProgress?: boolean): Observable<GetOrganizationProfile>;
    public getWebOrganizationProfileRoute(profileId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetOrganizationProfile>>;
    public getWebOrganizationProfileRoute(profileId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetOrganizationProfile>>;
    public getWebOrganizationProfileRoute(profileId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getWebOrganizationProfileRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetOrganizationProfile>(`${this.basePath}/views/profile/${encodeURIComponent(String(profileId))}/organization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
