/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GetClientComplaint } from '../model/getClientComplaint';
import { GetComment } from '../model/getComment';
import { GetExpertSueDetails } from '../model/getExpertSueDetails';
import { PostClientComplaint } from '../model/postClientComplaint';
import { PostComment } from '../model/postComment';
import { PostCommentAnswer } from '../model/postCommentAnswer';
import { PostCommentReport } from '../model/postCommentReport';
import { PostExpertComplaint } from '../model/postExpertComplaint';
import { PostTechnicalProblem } from '../model/postTechnicalProblem';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ServiceUsageEventService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cancel client complaint
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClientComplaintRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteClientComplaintRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteClientComplaintRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteClientComplaintRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling deleteClientComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client complaint for expert
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClientComplaintForExpertRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<GetClientComplaint>;
    public getClientComplaintForExpertRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetClientComplaint>>;
    public getClientComplaintForExpertRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetClientComplaint>>;
    public getClientComplaintForExpertRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling getClientComplaintForExpertRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetClientComplaint>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint/expert`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get client complaint
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClientComplaintRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<GetClientComplaint>;
    public getClientComplaintRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetClientComplaint>>;
    public getClientComplaintRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetClientComplaint>>;
    public getClientComplaintRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling getClientComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetClientComplaint>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all client complaints for expert
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClientComplaintsForExpertRoute(observe?: 'body', reportProgress?: boolean): Observable<Array<GetClientComplaint>>;
    public getClientComplaintsForExpertRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetClientComplaint>>>;
    public getClientComplaintsForExpertRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetClientComplaint>>>;
    public getClientComplaintsForExpertRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetClientComplaint>>(`${this.basePath}/api/service-usage-event/client-complaints/expert`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get comments for service
     * 
     * @param serviceId serviceId
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCommentsRoute(serviceId: string, limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetComment>>;
    public getCommentsRoute(serviceId: string, limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetComment>>>;
    public getCommentsRoute(serviceId: string, limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetComment>>>;
    public getCommentsRoute(serviceId: string, limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling getCommentsRoute.');
        }
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getCommentsRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getCommentsRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetComment>>(`${this.basePath}/api/services/${encodeURIComponent(String(serviceId))}/comments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get service usage event details for expert
     * 
     * @param ratelCallId ratelCallId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSueDetailsForExpertRoute(ratelCallId: string, observe?: 'body', reportProgress?: boolean): Observable<GetExpertSueDetails>;
    public getSueDetailsForExpertRoute(ratelCallId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetExpertSueDetails>>;
    public getSueDetailsForExpertRoute(ratelCallId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetExpertSueDetails>>;
    public getSueDetailsForExpertRoute(ratelCallId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ratelCallId === null || ratelCallId === undefined) {
            throw new Error('Required parameter ratelCallId was null or undefined when calling getSueDetailsForExpertRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetExpertSueDetails>(`${this.basePath}/api/service-usage-event/ratel-call/${encodeURIComponent(String(ratelCallId))}/details/expert`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create client complaint
     * 
     * @param sueId sueId
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postClientComplaintRoute(sueId: string, body: PostClientComplaint, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postClientComplaintRoute(sueId: string, body: PostClientComplaint, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postClientComplaintRoute(sueId: string, body: PostClientComplaint, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postClientComplaintRoute(sueId: string, body: PostClientComplaint, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postClientComplaintRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postClientComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create comment answer
     * 
     * @param sueId sueId
     * @param commentId commentId
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCommentAnswerRoute(sueId: string, commentId: string, body: PostCommentAnswer, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCommentAnswerRoute(sueId: string, commentId: string, body: PostCommentAnswer, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCommentAnswerRoute(sueId: string, commentId: string, body: PostCommentAnswer, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCommentAnswerRoute(sueId: string, commentId: string, body: PostCommentAnswer, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postCommentAnswerRoute.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling postCommentAnswerRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCommentAnswerRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/comments/${encodeURIComponent(String(commentId))}/answer`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create comment report
     * 
     * @param sueId sueId
     * @param commentId commentId
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCommentReportRoute(sueId: string, commentId: string, body: PostCommentReport, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCommentReportRoute(sueId: string, commentId: string, body: PostCommentReport, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCommentReportRoute(sueId: string, commentId: string, body: PostCommentReport, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCommentReportRoute(sueId: string, commentId: string, body: PostCommentReport, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postCommentReportRoute.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling postCommentReportRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCommentReportRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/comments/${encodeURIComponent(String(commentId))}/report`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create comment
     * 
     * @param sueId sueId
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCommentRoute(sueId: string, body: PostComment, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCommentRoute(sueId: string, body: PostComment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCommentRoute(sueId: string, body: PostComment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCommentRoute(sueId: string, body: PostComment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postCommentRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCommentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/comments`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Accept client complaint
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postExpertAcceptComplaintRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postExpertAcceptComplaintRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postExpertAcceptComplaintRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postExpertAcceptComplaintRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postExpertAcceptComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint/expert/accept`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Store expert&#39;s complaint about client
     * 
     * @param sueId sueId
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postExpertComplaintRoute(sueId: string, body: PostExpertComplaint, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postExpertComplaintRoute(sueId: string, body: PostExpertComplaint, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postExpertComplaintRoute(sueId: string, body: PostExpertComplaint, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postExpertComplaintRoute(sueId: string, body: PostExpertComplaint, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postExpertComplaintRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postExpertComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/expert-complaint`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reject client complaint
     * 
     * @param sueId sueId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postExpertRejectComplaintRoute(sueId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postExpertRejectComplaintRoute(sueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postExpertRejectComplaintRoute(sueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postExpertRejectComplaintRoute(sueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postExpertRejectComplaintRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/client-complaint/expert/reject`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Store information about technical problems during call
     * 
     * @param sueId sueId
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTechnicalProblemRoute(sueId: string, body: PostTechnicalProblem, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postTechnicalProblemRoute(sueId: string, body: PostTechnicalProblem, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postTechnicalProblemRoute(sueId: string, body: PostTechnicalProblem, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postTechnicalProblemRoute(sueId: string, body: PostTechnicalProblem, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling postTechnicalProblemRoute.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postTechnicalProblemRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/service-usage-event/${encodeURIComponent(String(sueId))}/technical-problem`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
