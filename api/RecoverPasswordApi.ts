/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class RecoverPasswordApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Create recover password
   * @param body New recover password
   */
  public postRecoverPasswordRoute(
    body: models.PostRecoverPassword,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetRecoverMethod> {
    const localVarPath = this.basePath + '/api/recover-password';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postRecoverPasswordRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Verify email token
   * @param body Verify email token
   */
  public postRecoverPasswordVerifyEmailRoute(
    body: models.PostRecoverPasswordVerifyEmailToken,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetMsisdn> {
    const localVarPath = this.basePath + '/api/recover-password/verify/email';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling postRecoverPasswordVerifyEmailRoute.',
      );
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Verify Msisdn token
   * @param body Verify Msisdn token
   */
  public postRecoverPasswordVerifyMsisdnRoute(
    body: models.PostRecoverPasswordVerifyMsisdnToken,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/recover-password/verify/msisdn';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling postRecoverPasswordVerifyMsisdnRoute.',
      );
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Update password
   * @param body update password
   */
  public putRecoverPasswordEmailRoute(
    body: models.PutRecoverPasswordEmail,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/recover-password/email';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling putRecoverPasswordEmailRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Update password
   * @param body update password
   */
  public putRecoverPasswordMsisdnRoute(
    body: models.PutRecoverPasswordMsisdn,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/recover-password/msisdn';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling putRecoverPasswordMsisdnRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
