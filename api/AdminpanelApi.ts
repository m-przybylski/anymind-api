/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class AdminpanelApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Delete expert from closed beta list
   * @param msisdn msisdn
   */
  public deleteClosedBetaExpertRoute(msisdn: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/adminpanel/closed-beta-experts/{msisdn}'.replace('{' + 'msisdn' + '}', String(msisdn));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'msisdn' is not null or undefined
    if (msisdn === null || msisdn === undefined) {
      throw new Error('Required parameter msisdn was null or undefined when calling deleteClosedBetaExpertRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get lists of account activities
   * @param accountId UUID
   * @param limit Int
   * @param offset Int
   */
  public getAccountActivitiesRoute(
    accountId: string,
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetActivities> {
    const localVarPath = this.basePath + '/api/adminpanel/account-activities';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getAccountActivitiesRoute.');
    }
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getAccountActivitiesRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getAccountActivitiesRoute.');
    }
    if (accountId !== undefined) {
      queryParameters['accountId'] = accountId;
    }

    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get complaints rejected by experts
   * @param limit Int
   * @param offset Int
   * @param status ClientComplaintStatus
   */
  public getAdminClientComplaintsRoute(
    limit: string,
    offset: string,
    status?: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetClientComplaint>> {
    const localVarPath = this.basePath + '/api/adminpanel/client-complaints';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getAdminClientComplaintsRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getAdminClientComplaintsRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    if (status !== undefined) {
      queryParameters['status'] = status;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get list of client activities
   * @param limit Int
   * @param offset Int
   */
  public getClientActivitiesRoute(
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetClientActivity>> {
    const localVarPath = this.basePath + '/api/adminpanel/client-activities';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getClientActivitiesRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getClientActivitiesRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get closed beta expert list
   */
  public getClosedBetaExpertListRoute(extraHttpRequestParams?: any): ng.IHttpPromise<models.GetClosedBetaExperts> {
    const localVarPath = this.basePath + '/api/adminpanel/closed-beta-experts';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Check if expert is registered for closed beta
   * @param msisdn msisdn
   */
  public getClosedBetaExpertRoute(
    msisdn: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetClosedBetaExpert> {
    const localVarPath =
      this.basePath + '/api/adminpanel/closed-beta-experts/{msisdn}'.replace('{' + 'msisdn' + '}', String(msisdn));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'msisdn' is not null or undefined
    if (msisdn === null || msisdn === undefined) {
      throw new Error('Required parameter msisdn was null or undefined when calling getClosedBetaExpertRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get counters
   */
  public getCountersRoute(extraHttpRequestParams?: any): ng.IHttpPromise<models.GetCounters> {
    const localVarPath = this.basePath + '/api/adminpanel/counters';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get adminpanel session
   */
  public getCurrentSessionRoute(extraHttpRequestParams?: any): ng.IHttpPromise<models.AdminPanelSession> {
    const localVarPath = this.basePath + '/api/adminpanel/session';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get list of expert complaints
   * @param limit Int
   * @param offset Int
   */
  public getExpertComplaintsRoute(
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetExpertComplaint>> {
    const localVarPath = this.basePath + '/api/adminpanel/expert-complaints';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getExpertComplaintsRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getExpertComplaintsRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get profile balance
   * @param accountId Account ID
   */
  public getProfileBalanceRoute(accountId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.MoneyDto> {
    const localVarPath =
      this.basePath + '/api/adminpanel/profile-balance/{accountId}'.replace('{' + 'accountId' + '}', String(accountId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getProfileBalanceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get list of profiles
   * @param limit Int
   * @param offset Int
   */
  public getProfilesRoute(
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetProfile>> {
    const localVarPath = this.basePath + '/api/adminpanel/profiles';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getProfilesRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getProfilesRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get list of profiles ready for payout
   */
  public getProfilesWithPayoutDetailsRoute(
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetProfileWithPayoutDetails>> {
    const localVarPath = this.basePath + '/api/adminpanel/payout/profiles';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get list of technical issues
   * @param limit Int
   * @param offset Int
   */
  public getTechnicalIssuesRoute(
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetTechnicalProblem>> {
    const localVarPath = this.basePath + '/api/adminpanel/technical-issues';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getTechnicalIssuesRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getTechnicalIssuesRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Logout from current adminpanel session
   */
  public logoutCurrentSessionRoute(extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/adminpanel/session';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Block account
   * @param accountId Account ID
   */
  public postAccountBlockRoute(accountId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/adminpanel/accounts/{accountId}/block'.replace('{' + 'accountId' + '}', String(accountId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling postAccountBlockRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Unblock account
   * @param accountId Account ID
   */
  public postAccountUnblockRoute(accountId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath +
      '/api/adminpanel/accounts/{accountId}/unblock'.replace('{' + 'accountId' + '}', String(accountId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling postAccountUnblockRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get call activity details
   * @param body
   */
  public postActivityDetailsRoute(
    body: models.AdminPanelLogin,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetCallDetails> {
    const localVarPath = this.basePath + '/api/adminpanel/activity-details';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postActivityDetailsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Accept client complaint
   * @param sueId sueId
   */
  public postAdminAcceptComplaintRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/adminpanel/client-complaints/{sueId}/accept'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postAdminAcceptComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Reject client complaint
   * @param sueId sueId
   */
  public postAdminRejectComplaintRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/adminpanel/client-complaints/{sueId}/reject'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postAdminRejectComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Generate payout for given profile
   * @param body
   */
  public postGeneratePayoutRoute(
    body: models.PostGeneratePayout,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayoutDto> {
    const localVarPath = this.basePath + '/api/adminpanel/payout-invoice';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postGeneratePayoutRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Login to admin panel using email and password
   * @param body
   */
  public postLoginRoute(
    body: models.AdminPanelLogin,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.AdminPanelSession> {
    const localVarPath = this.basePath + '/api/adminpanel/session';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postLoginRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Put closed beta expert list
   * @param body
   */
  public putClosedBetaExpertListRoute(
    body: models.GetClosedBetaExperts,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetClosedBetaExperts> {
    const localVarPath = this.basePath + '/api/adminpanel/closed-beta-experts';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling putClosedBetaExpertListRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
