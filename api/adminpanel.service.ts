/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AdminPanelLogin } from '../model/adminPanelLogin';
import { AdminPanelSession } from '../model/adminPanelSession';
import { GetActivities } from '../model/getActivities';
import { GetCallDetails } from '../model/getCallDetails';
import { GetClientActivity } from '../model/getClientActivity';
import { GetClosedBetaExpert } from '../model/getClosedBetaExpert';
import { GetClosedBetaExperts } from '../model/getClosedBetaExperts';
import { GetCounters } from '../model/getCounters';
import { GetExpertComplaint } from '../model/getExpertComplaint';
import { GetPayoutDto } from '../model/getPayoutDto';
import { GetProfile } from '../model/getProfile';
import { GetTechnicalProblem } from '../model/getTechnicalProblem';
import { JValue } from '../model/jValue';
import { MoneyDto } from '../model/moneyDto';
import { PostGeneratePayout } from '../model/postGeneratePayout';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AdminpanelService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete expert from closed beta list
     * 
     * @param msisdn msisdn
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClosedBetaExpertRoute(msisdn: string, observe?: 'body', reportProgress?: boolean): Observable<JValue>;
    public deleteClosedBetaExpertRoute(msisdn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JValue>>;
    public deleteClosedBetaExpertRoute(msisdn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JValue>>;
    public deleteClosedBetaExpertRoute(msisdn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (msisdn === null || msisdn === undefined) {
            throw new Error('Required parameter msisdn was null or undefined when calling deleteClosedBetaExpertRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<JValue>(`${this.basePath}/api/adminpanel/closed-beta-experts/${encodeURIComponent(String(msisdn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get lists of account activities
     * 
     * @param accountId UUID
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountActivitiesRoute(accountId: string, limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<GetActivities>;
    public getAccountActivitiesRoute(accountId: string, limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetActivities>>;
    public getAccountActivitiesRoute(accountId: string, limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetActivities>>;
    public getAccountActivitiesRoute(accountId: string, limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountActivitiesRoute.');
        }
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getAccountActivitiesRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getAccountActivitiesRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accountId !== undefined) {
            queryParameters = queryParameters.set('accountId', <any>accountId);
        }
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetActivities>(`${this.basePath}/api/adminpanel/account-activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of client activities
     * 
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClientActivitiesRoute(limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetClientActivity>>;
    public getClientActivitiesRoute(limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetClientActivity>>>;
    public getClientActivitiesRoute(limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetClientActivity>>>;
    public getClientActivitiesRoute(limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getClientActivitiesRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getClientActivitiesRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetClientActivity>>(`${this.basePath}/api/adminpanel/client-activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get closed beta expert list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClosedBetaExpertListRoute(observe?: 'body', reportProgress?: boolean): Observable<GetClosedBetaExperts>;
    public getClosedBetaExpertListRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetClosedBetaExperts>>;
    public getClosedBetaExpertListRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetClosedBetaExperts>>;
    public getClosedBetaExpertListRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetClosedBetaExperts>(`${this.basePath}/api/adminpanel/closed-beta-experts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check if expert is registered for closed beta
     * 
     * @param msisdn msisdn
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClosedBetaExpertRoute(msisdn: string, observe?: 'body', reportProgress?: boolean): Observable<GetClosedBetaExpert>;
    public getClosedBetaExpertRoute(msisdn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetClosedBetaExpert>>;
    public getClosedBetaExpertRoute(msisdn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetClosedBetaExpert>>;
    public getClosedBetaExpertRoute(msisdn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (msisdn === null || msisdn === undefined) {
            throw new Error('Required parameter msisdn was null or undefined when calling getClosedBetaExpertRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetClosedBetaExpert>(`${this.basePath}/api/adminpanel/closed-beta-experts/${encodeURIComponent(String(msisdn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get counters
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountersRoute(observe?: 'body', reportProgress?: boolean): Observable<GetCounters>;
    public getCountersRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetCounters>>;
    public getCountersRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetCounters>>;
    public getCountersRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetCounters>(`${this.basePath}/api/adminpanel/counters`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get adminpanel session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentSessionRoute(observe?: 'body', reportProgress?: boolean): Observable<AdminPanelSession>;
    public getCurrentSessionRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdminPanelSession>>;
    public getCurrentSessionRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdminPanelSession>>;
    public getCurrentSessionRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<AdminPanelSession>(`${this.basePath}/api/adminpanel/session`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of expert complaints
     * 
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExpertComplaintsRoute(limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetExpertComplaint>>;
    public getExpertComplaintsRoute(limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetExpertComplaint>>>;
    public getExpertComplaintsRoute(limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetExpertComplaint>>>;
    public getExpertComplaintsRoute(limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getExpertComplaintsRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getExpertComplaintsRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetExpertComplaint>>(`${this.basePath}/api/adminpanel/expert-complaints`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get profile balance
     * 
     * @param accountId Account ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfileBalanceRoute(accountId: string, observe?: 'body', reportProgress?: boolean): Observable<MoneyDto>;
    public getProfileBalanceRoute(accountId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MoneyDto>>;
    public getProfileBalanceRoute(accountId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MoneyDto>>;
    public getProfileBalanceRoute(accountId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getProfileBalanceRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MoneyDto>(`${this.basePath}/api/adminpanel/profile-balance/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of profiles
     * 
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfilesRoute(limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetProfile>>;
    public getProfilesRoute(limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetProfile>>>;
    public getProfilesRoute(limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetProfile>>>;
    public getProfilesRoute(limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getProfilesRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getProfilesRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetProfile>>(`${this.basePath}/api/adminpanel/profiles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of technical issues
     * 
     * @param limit Int
     * @param offset Int
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTechnicalIssuesRoute(limit: string, offset: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetTechnicalProblem>>;
    public getTechnicalIssuesRoute(limit: string, offset: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetTechnicalProblem>>>;
    public getTechnicalIssuesRoute(limit: string, offset: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetTechnicalProblem>>>;
    public getTechnicalIssuesRoute(limit: string, offset: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getTechnicalIssuesRoute.');
        }
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getTechnicalIssuesRoute.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetTechnicalProblem>>(`${this.basePath}/api/adminpanel/technical-issues`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Logout from current adminpanel session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logoutCurrentSessionRoute(observe?: 'body', reportProgress?: boolean): Observable<JValue>;
    public logoutCurrentSessionRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JValue>>;
    public logoutCurrentSessionRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JValue>>;
    public logoutCurrentSessionRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<JValue>(`${this.basePath}/api/adminpanel/session`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Block account
     * 
     * @param accountId Account ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAccountBlockRoute(accountId: string, observe?: 'body', reportProgress?: boolean): Observable<JValue>;
    public postAccountBlockRoute(accountId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JValue>>;
    public postAccountBlockRoute(accountId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JValue>>;
    public postAccountBlockRoute(accountId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling postAccountBlockRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<JValue>(`${this.basePath}/api/adminpanel/accounts/${encodeURIComponent(String(accountId))}/block`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unblock account
     * 
     * @param accountId Account ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAccountUnblockRoute(accountId: string, observe?: 'body', reportProgress?: boolean): Observable<JValue>;
    public postAccountUnblockRoute(accountId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JValue>>;
    public postAccountUnblockRoute(accountId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JValue>>;
    public postAccountUnblockRoute(accountId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling postAccountUnblockRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<JValue>(`${this.basePath}/api/adminpanel/accounts/${encodeURIComponent(String(accountId))}/unblock`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get call activity details
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postActivityDetailsRoute(body: AdminPanelLogin, observe?: 'body', reportProgress?: boolean): Observable<GetCallDetails>;
    public postActivityDetailsRoute(body: AdminPanelLogin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetCallDetails>>;
    public postActivityDetailsRoute(body: AdminPanelLogin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetCallDetails>>;
    public postActivityDetailsRoute(body: AdminPanelLogin, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postActivityDetailsRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetCallDetails>(`${this.basePath}/api/adminpanel/activity-details`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generate payout for given profile
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postGeneratePayoutRoute(body: PostGeneratePayout, observe?: 'body', reportProgress?: boolean): Observable<GetPayoutDto>;
    public postGeneratePayoutRoute(body: PostGeneratePayout, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPayoutDto>>;
    public postGeneratePayoutRoute(body: PostGeneratePayout, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPayoutDto>>;
    public postGeneratePayoutRoute(body: PostGeneratePayout, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postGeneratePayoutRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetPayoutDto>(`${this.basePath}/api/adminpanel/payout-invoice`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login to admin panel using email and password
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postLoginRoute(body: AdminPanelLogin, observe?: 'body', reportProgress?: boolean): Observable<AdminPanelSession>;
    public postLoginRoute(body: AdminPanelLogin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdminPanelSession>>;
    public postLoginRoute(body: AdminPanelLogin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdminPanelSession>>;
    public postLoginRoute(body: AdminPanelLogin, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postLoginRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AdminPanelSession>(`${this.basePath}/api/adminpanel/session`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Put closed beta expert list
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putClosedBetaExpertListRoute(body: GetClosedBetaExperts, observe?: 'body', reportProgress?: boolean): Observable<GetClosedBetaExperts>;
    public putClosedBetaExpertListRoute(body: GetClosedBetaExperts, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetClosedBetaExperts>>;
    public putClosedBetaExpertListRoute(body: GetClosedBetaExperts, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetClosedBetaExperts>>;
    public putClosedBetaExpertListRoute(body: GetClosedBetaExperts, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putClosedBetaExpertListRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<GetClosedBetaExperts>(`${this.basePath}/api/adminpanel/closed-beta-experts`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
