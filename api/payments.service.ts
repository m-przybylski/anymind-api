/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ChangeDefaultCreditCard } from '../model/changeDefaultCreditCard';
import { CreatePayment } from '../model/createPayment';
import { DefaultCreditCard } from '../model/defaultCreditCard';
import { ExecutePayment } from '../model/executePayment';
import { GetCreditCard } from '../model/getCreditCard';
import { GetOrder } from '../model/getOrder';
import { GetPayment } from '../model/getPayment';
import { GetPaymentOptions } from '../model/getPaymentOptions';
import { PaymentId } from '../model/paymentId';
import { PaymentLink } from '../model/paymentLink';
import { PostAddNewCard } from '../model/postAddNewCard';
import { PostOrder } from '../model/postOrder';
import { PostPayment } from '../model/postPayment';
import { VerifyPayment } from '../model/verifyPayment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PaymentsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create PayPal future payment
     * 
     * @param body Create future payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFuturePaymentRoute(body: CreatePayment, observe?: 'body', reportProgress?: boolean): Observable<GetPayment>;
    public createFuturePaymentRoute(body: CreatePayment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPayment>>;
    public createFuturePaymentRoute(body: CreatePayment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPayment>>;
    public createFuturePaymentRoute(body: CreatePayment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createFuturePaymentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetPayment>(`${this.basePath}/api/payments/paypal/create-future-payment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create internal payment
     * 
     * @param body Create payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createInternalPaymentRoute(body: PostPayment, observe?: 'body', reportProgress?: boolean): Observable<PaymentId>;
    public createInternalPaymentRoute(body: PostPayment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaymentId>>;
    public createInternalPaymentRoute(body: PostPayment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentId>>;
    public createInternalPaymentRoute(body: PostPayment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createInternalPaymentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<PaymentId>(`${this.basePath}/api/payments/paypal/create-internal-payment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create PayPal payment
     * 
     * @param body Create payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPaymentRoute(body: CreatePayment, observe?: 'body', reportProgress?: boolean): Observable<GetPayment>;
    public createPaymentRoute(body: CreatePayment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPayment>>;
    public createPaymentRoute(body: CreatePayment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPayment>>;
    public createPaymentRoute(body: CreatePayment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPaymentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetPayment>(`${this.basePath}/api/payments/paypal/create-payment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Execute PayPal payment
     * 
     * @param body Execute payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executePaymentRoute(body: ExecutePayment, observe?: 'body', reportProgress?: boolean): Observable<GetPayment>;
    public executePaymentRoute(body: ExecutePayment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPayment>>;
    public executePaymentRoute(body: ExecutePayment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPayment>>;
    public executePaymentRoute(body: ExecutePayment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling executePaymentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetPayment>(`${this.basePath}/api/payments/paypal/execute-payment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get credit cards
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCreditCardsRoute(observe?: 'body', reportProgress?: boolean): Observable<Array<GetCreditCard>>;
    public getCreditCardsRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetCreditCard>>>;
    public getCreditCardsRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetCreditCard>>>;
    public getCreditCardsRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<GetCreditCard>>(`${this.basePath}/api/payments/tpay/credit-cards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get default payment method
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultPaymentMethodRoute(observe?: 'body', reportProgress?: boolean): Observable<DefaultCreditCard>;
    public getDefaultPaymentMethodRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultCreditCard>>;
    public getDefaultPaymentMethodRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultCreditCard>>;
    public getDefaultPaymentMethodRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DefaultCreditCard>(`${this.basePath}/api/payments/default-payment-method`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get payu payment links
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPayUPaymentLinksRoute(observe?: 'body', reportProgress?: boolean): Observable<Array<PaymentLink>>;
    public getPayUPaymentLinksRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PaymentLink>>>;
    public getPayUPaymentLinksRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PaymentLink>>>;
    public getPayUPaymentLinksRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<PaymentLink>>(`${this.basePath}/api/payments/payu/payment-links`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get payment options
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentOptionsRoute(observe?: 'body', reportProgress?: boolean): Observable<GetPaymentOptions>;
    public getPaymentOptionsRoute(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPaymentOptions>>;
    public getPaymentOptionsRoute(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPaymentOptions>>;
    public getPaymentOptionsRoute(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetPaymentOptions>(`${this.basePath}/api/payments/options`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new credit card
     * 
     * @param body New card&#39;s data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCreditCardRoute(body: PostAddNewCard, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCreditCardRoute(body: PostAddNewCard, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCreditCardRoute(body: PostAddNewCard, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCreditCardRoute(body: PostAddNewCard, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCreditCardRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/payments/tpay/credit-card`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create order
     * 
     * @param body Order request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPayUOrderRoute(body: PostOrder, observe?: 'body', reportProgress?: boolean): Observable<GetOrder>;
    public postPayUOrderRoute(body: PostOrder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetOrder>>;
    public postPayUOrderRoute(body: PostOrder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetOrder>>;
    public postPayUOrderRoute(body: PostOrder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postPayUOrderRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetOrder>(`${this.basePath}/api/payments/payu/order`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change default payment method
     * 
     * @param body ChangeDefaultCreditCard
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putDefaultPaymentMethodRoute(body?: ChangeDefaultCreditCard, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putDefaultPaymentMethodRoute(body?: ChangeDefaultCreditCard, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putDefaultPaymentMethodRoute(body?: ChangeDefaultCreditCard, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putDefaultPaymentMethodRoute(body?: ChangeDefaultCreditCard, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/payments/default-payment-method`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verify PayPal payment
     * 
     * @param body Verify payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyPaymentRoute(body: VerifyPayment, observe?: 'body', reportProgress?: boolean): Observable<GetPayment>;
    public verifyPaymentRoute(body: VerifyPayment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPayment>>;
    public verifyPaymentRoute(body: VerifyPayment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPayment>>;
    public verifyPaymentRoute(body: VerifyPayment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling verifyPaymentRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<GetPayment>(`${this.basePath}/api/payments/paypal/verify-payment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
