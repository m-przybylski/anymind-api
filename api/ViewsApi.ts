/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ViewsApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Get call summary for client
   * @param sueId sueId
   */
  public getClientCallSummaryRoute(
    sueId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.ClientCallSummary> {
    const localVarPath =
      this.basePath +
      '/api/views/dashboard/sue/{sueId}/call-summary/client'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getClientCallSummaryRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get dashboard activity filters for client
   */
  public getDashboardActivitiesClientFiltersRoute(
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetActivityFilters> {
    const localVarPath = this.basePath + '/api/views/dashboard/activities/client/filters';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get dashboard activities for client
   * @param activityType ActivityType
   * @param profileId AccountId
   * @param serviceId ServiceId
   * @param dateFrom Instant
   * @param dateTo Instant
   * @param limit Int
   * @param offset Int
   */
  public getDashboardActivitiesClientRoute(
    activityType?: string,
    profileId?: string,
    serviceId?: string,
    dateFrom?: string,
    dateTo?: string,
    limit?: string,
    offset?: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetClientActivities> {
    const localVarPath = this.basePath + '/api/views/dashboard/activities/client';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    if (activityType !== undefined) {
      queryParameters['activityType'] = activityType;
    }

    if (profileId !== undefined) {
      queryParameters['profileId'] = profileId;
    }

    if (serviceId !== undefined) {
      queryParameters['serviceId'] = serviceId;
    }

    if (dateFrom !== undefined) {
      queryParameters['dateFrom'] = dateFrom;
    }

    if (dateTo !== undefined) {
      queryParameters['dateTo'] = dateTo;
    }

    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get dashboard activity filters for profile
   */
  public getDashboardActivitiesProfileFiltersRoute(
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetActivityFilters> {
    const localVarPath = this.basePath + '/api/views/dashboard/activities/profile/filters';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get dashboard activities for profile
   * @param activityType ActivityType
   * @param profileId AccountId
   * @param serviceId ServiceId
   * @param dateFrom Instant
   * @param dateTo Instant
   * @param limit Int
   * @param offset Int
   */
  public getDashboardActivitiesProfileRoute(
    activityType?: string,
    profileId?: string,
    serviceId?: string,
    dateFrom?: string,
    dateTo?: string,
    limit?: string,
    offset?: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetProfileActivities> {
    const localVarPath = this.basePath + '/api/views/dashboard/activities/profile';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    if (activityType !== undefined) {
      queryParameters['activityType'] = activityType;
    }

    if (profileId !== undefined) {
      queryParameters['profileId'] = profileId;
    }

    if (serviceId !== undefined) {
      queryParameters['serviceId'] = serviceId;
    }

    if (dateFrom !== undefined) {
      queryParameters['dateFrom'] = dateFrom;
    }

    if (dateTo !== undefined) {
      queryParameters['dateTo'] = dateTo;
    }

    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get service usage event details
   * @param sueId sueId
   */
  public getDashboardCallDetailsRoute(
    sueId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetCallDetails> {
    const localVarPath =
      this.basePath + '/api/views/dashboard/sue/{sueId}/details'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getDashboardCallDetailsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get client dashboard
   */
  public getDashboardClientExpertsRoute(
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetDashboardClientExperts> {
    const localVarPath = this.basePath + '/api/views/dashboard/client/experts';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get payout details
   * @param payoutId payoutId
   */
  public getDashboardPayoutDetailsRoute(
    payoutId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetPayoutDetails> {
    const localVarPath =
      this.basePath +
      '/api/views/dashboard/payout/{payoutId}/details'.replace('{' + 'payoutId' + '}', String(payoutId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'payoutId' is not null or undefined
    if (payoutId === null || payoutId === undefined) {
      throw new Error('Required parameter payoutId was null or undefined when calling getDashboardPayoutDetailsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get call summary for expert
   * @param sueId sueId
   */
  public getExpertCallSummaryRoute(
    sueId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.ExpertCallSummary> {
    const localVarPath =
      this.basePath +
      '/api/views/dashboard/sue/{sueId}/call-summary/expert'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getExpertCallSummaryRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get simple expert profile
   * @param profileId profileId
   */
  public getMobileExpertProfileRoute(
    profileId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.SimpleExpertProfileView> {
    const localVarPath =
      this.basePath +
      '/api/views/mobile/profile/{profileId}/expert'.replace('{' + 'profileId' + '}', String(profileId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'profileId' is not null or undefined
    if (profileId === null || profileId === undefined) {
      throw new Error('Required parameter profileId was null or undefined when calling getMobileExpertProfileRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get simple organization profile
   * @param profileId profileId
   */
  public getMobileOrganizationProfileRoute(
    profileId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.SimpleOrganizationProfileView> {
    const localVarPath =
      this.basePath +
      '/api/views/mobile/profile/{profileId}/organization'.replace('{' + 'profileId' + '}', String(profileId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'profileId' is not null or undefined
    if (profileId === null || profileId === undefined) {
      throw new Error(
        'Required parameter profileId was null or undefined when calling getMobileOrganizationProfileRoute.',
      );
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get service details
   * @param serviceId serviceId
   */
  public getMobileServiceDetailsRoute(
    serviceId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetMobileServiceDetails> {
    const localVarPath =
      this.basePath + '/api/views/mobile/service/{serviceId}'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error('Required parameter serviceId was null or undefined when calling getMobileServiceDetailsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get full expert profile
   * @param profileId profileId
   */
  public getWebExpertProfileRoute(
    profileId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.ExpertProfileView> {
    const localVarPath =
      this.basePath + '/api/views/profile/{profileId}/expert'.replace('{' + 'profileId' + '}', String(profileId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'profileId' is not null or undefined
    if (profileId === null || profileId === undefined) {
      throw new Error('Required parameter profileId was null or undefined when calling getWebExpertProfileRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get full organization profile
   * @param profileId profileId
   */
  public getWebOrganizationProfileRoute(
    profileId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.OrganizationProfileView> {
    const localVarPath =
      this.basePath + '/api/views/profile/{profileId}/organization'.replace('{' + 'profileId' + '}', String(profileId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'profileId' is not null or undefined
    if (profileId === null || profileId === undefined) {
      throw new Error(
        'Required parameter profileId was null or undefined when calling getWebOrganizationProfileRoute.',
      );
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
