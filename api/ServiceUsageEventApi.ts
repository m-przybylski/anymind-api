/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ServiceUsageEventApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Cancel client complaint
   * @param sueId sueId
   */
  public deleteClientComplaintRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/client-complaint'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling deleteClientComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get client complaint for expert
   * @param sueId sueId
   */
  public getClientComplaintForExpertRoute(
    sueId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetClientComplaint> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/{sueId}/client-complaint/expert'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getClientComplaintForExpertRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get client complaint
   * @param sueId sueId
   */
  public getClientComplaintRoute(
    sueId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetClientComplaint> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/client-complaint'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getClientComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get all client complaints for expert
   */
  public getClientComplaintsForExpertRoute(
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetClientComplaint>> {
    const localVarPath = this.basePath + '/api/service-usage-event/client-complaints/expert';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get service usage event details for expert
   * @param ratelCallId ratelCallId
   */
  public getSueDetailsForExpertRoute(
    ratelCallId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetExpertSueDetails> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/ratel-call/{ratelCallId}/details/expert'.replace(
        '{' + 'ratelCallId' + '}',
        String(ratelCallId),
      );

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'ratelCallId' is not null or undefined
    if (ratelCallId === null || ratelCallId === undefined) {
      throw new Error('Required parameter ratelCallId was null or undefined when calling getSueDetailsForExpertRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get technical problem for specified sueId
   * @param sueId sueId
   */
  public getTechnicalProblemRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/technical-problem'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling getTechnicalProblemRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create client complaint
   * @param sueId sueId
   * @param body body
   */
  public postClientComplaintRoute(
    sueId: string,
    body: models.PostClientComplaint,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/client-complaint'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postClientComplaintRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postClientComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create comment answer
   * @param sueId sueId
   * @param commentId commentId
   * @param body
   */
  public postCommentAnswerRoute(
    sueId: string,
    commentId: string,
    body: models.PostCommentAnswer,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/{sueId}/comments/{commentId}/answer'
        .replace('{' + 'sueId' + '}', String(sueId))
        .replace('{' + 'commentId' + '}', String(commentId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postCommentAnswerRoute.');
    }
    // verify required parameter 'commentId' is not null or undefined
    if (commentId === null || commentId === undefined) {
      throw new Error('Required parameter commentId was null or undefined when calling postCommentAnswerRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postCommentAnswerRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create comment report
   * @param sueId sueId
   * @param commentId commentId
   * @param body
   */
  public postCommentReportRoute(
    sueId: string,
    commentId: string,
    body: models.PostCommentReport,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/{sueId}/comments/{commentId}/report'
        .replace('{' + 'sueId' + '}', String(sueId))
        .replace('{' + 'commentId' + '}', String(commentId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postCommentReportRoute.');
    }
    // verify required parameter 'commentId' is not null or undefined
    if (commentId === null || commentId === undefined) {
      throw new Error('Required parameter commentId was null or undefined when calling postCommentReportRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postCommentReportRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create comment
   * @param sueId sueId
   * @param body
   */
  public postCommentRoute(sueId: string, body: models.PostComment, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/comments'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postCommentRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postCommentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Accept client complaint
   * @param sueId sueId
   */
  public postExpertAcceptComplaintRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/{sueId}/client-complaint/expert/accept'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postExpertAcceptComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Store expert's complaint about client
   * @param sueId sueId
   * @param body body
   */
  public postExpertComplaintRoute(
    sueId: string,
    body: models.PostExpertComplaint,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/expert-complaint'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postExpertComplaintRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postExpertComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Reject client complaint
   * @param sueId sueId
   */
  public postExpertRejectComplaintRoute(sueId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath +
      '/api/service-usage-event/{sueId}/client-complaint/expert/reject'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postExpertRejectComplaintRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create sue rating
   * @param sueId sueId
   * @param body PostSueRating
   */
  public postSueRatingRoute(
    sueId: string,
    body: models.PostSueRating,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetSueRating> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/rate'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postSueRatingRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postSueRatingRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Store information about technical problems during call
   * @param sueId sueId
   * @param body body
   */
  public postTechnicalProblemRoute(
    sueId: string,
    body: models.PostTechnicalProblem,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/technical-problem'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling postTechnicalProblemRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postTechnicalProblemRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Update sue rating
   * @param sueId sueId
   * @param body PutSueRating
   */
  public putSueRatingRoute(
    sueId: string,
    body: models.PutSueRating,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/service-usage-event/{sueId}/rate'.replace('{' + 'sueId' + '}', String(sueId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'sueId' is not null or undefined
    if (sueId === null || sueId === undefined) {
      throw new Error('Required parameter sueId was null or undefined when calling putSueRatingRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling putSueRatingRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
