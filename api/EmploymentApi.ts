/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class EmploymentApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Delete user employment for service
   * @param serviceId serviceId
   */
  public deleteEmploymentForServiceRoute(serviceId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/employments/service/{serviceId}'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error(
        'Required parameter serviceId was null or undefined when calling deleteEmploymentForServiceRoute.',
      );
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Delete employment
   * @param employmentId employmentId
   */
  public deleteEmploymentRoute(employmentId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/employments/{employmentId}'.replace('{' + 'employmentId' + '}', String(employmentId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'employmentId' is not null or undefined
    if (employmentId === null || employmentId === undefined) {
      throw new Error('Required parameter employmentId was null or undefined when calling deleteEmploymentRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Delete employments
   * @param employeeIds employeeIds
   */
  public deleteEmploymentsRoute(
    employeeIds: models.DeleteEmployments,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<{}> {
    const localVarPath = this.basePath + '/api/employments';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'employeeIds' is not null or undefined
    if (employeeIds === null || employeeIds === undefined) {
      throw new Error('Required parameter employeeIds was null or undefined when calling deleteEmploymentsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      data: employeeIds,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary List of employees profile details with their employments
   */
  public getEmployeesRoute(extraHttpRequestParams?: any): ng.IHttpPromise<Array<models.ExpertProfileWithEmployments>> {
    const localVarPath = this.basePath + '/api/employments';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary List comments for employment
   * @param employmentId employmentId
   * @param limit Int
   * @param offset Int
   */
  public getEmploymentCommentsRoute(
    employmentId: string,
    limit: string,
    offset: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetComment>> {
    const localVarPath =
      this.basePath +
      '/api/employments/{employmentId}/comments'.replace('{' + 'employmentId' + '}', String(employmentId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'employmentId' is not null or undefined
    if (employmentId === null || employmentId === undefined) {
      throw new Error('Required parameter employmentId was null or undefined when calling getEmploymentCommentsRoute.');
    }
    // verify required parameter 'limit' is not null or undefined
    if (limit === null || limit === undefined) {
      throw new Error('Required parameter limit was null or undefined when calling getEmploymentCommentsRoute.');
    }
    // verify required parameter 'offset' is not null or undefined
    if (offset === null || offset === undefined) {
      throw new Error('Required parameter offset was null or undefined when calling getEmploymentCommentsRoute.');
    }
    if (limit !== undefined) {
      queryParameters['limit'] = limit;
    }

    if (offset !== undefined) {
      queryParameters['offset'] = offset;
    }

    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
