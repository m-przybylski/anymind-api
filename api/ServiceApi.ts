/**
 * AnyMind API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ServiceApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: any = {};

  static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

  constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
    if (basePath !== undefined) {
      this.basePath = basePath;
    }
  }

  /**
   *
   * @summary Remove service by id
   * @param serviceId serviceId
   */
  public deleteServiceRoute(serviceId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}> {
    const localVarPath =
      this.basePath + '/api/services/{serviceId}'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error('Required parameter serviceId was null or undefined when calling deleteServiceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'DELETE',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get Details of services of users
   * @param accountId accountId
   */
  public getProfileServicesRoute(
    accountId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetService>> {
    const localVarPath =
      this.basePath + '/api/services/profile/{accountId}'.replace('{' + 'accountId' + '}', String(accountId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getProfileServicesRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get gross price of service
   * @param serviceId serviceId
   */
  public getServiceGrossPriceRoute(
    serviceId: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetServiceGrossPrice> {
    const localVarPath =
      this.basePath + '/api/services/{serviceId}/gross-price'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error('Required parameter serviceId was null or undefined when calling getServiceGrossPriceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get Details of a service
   * @param serviceId serviceId
   */
  public getServiceRoute(serviceId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetService> {
    const localVarPath =
      this.basePath + '/api/services/{serviceId}'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error('Required parameter serviceId was null or undefined when calling getServiceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get suggested employees
   * @param expression expression
   */
  public getSuggestionsRoute(
    expression: string,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetService>> {
    const localVarPath =
      this.basePath + '/api/services/suggest/{expression}'.replace('{' + 'expression' + '}', String(expression));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'expression' is not null or undefined
    if (expression === null || expression === undefined) {
      throw new Error('Required parameter expression was null or undefined when calling getSuggestionsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'GET',
      url: localVarPath,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   * You must be an service owner to list services invitations!
   * @summary Get services invitations
   * @param body serviceIds
   */
  public postServiceInvitationsRoute(
    body: models.PostServicesIds,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetServiceWithInvitations>> {
    const localVarPath = this.basePath + '/api/services/invitations';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postServiceInvitationsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Create a service
   * @param body UpdateServiceDetails
   */
  public postServiceRoute(body: models.PostService, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetService> {
    const localVarPath = this.basePath + '/api/services';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postServiceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get Details of a service and employees
   * @param body serviceIds
   */
  public postServiceWithEmployeesRoute(
    body: models.PostServicesIds,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetServiceWithEmployees>> {
    const localVarPath = this.basePath + '/api/services/employees';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postServiceWithEmployeesRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Get services tags
   * @param body UpdateServiceDetails
   */
  public postServicesTagsRoute(
    body: models.PostServicesIds,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<Array<models.GetServiceTags>> {
    const localVarPath = this.basePath + '/api/services/tags';

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling postServicesTagsRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'POST',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
  /**
   *
   * @summary Update Details of a service
   * @param serviceId serviceId
   * @param body UpdateServiceDetails
   */
  public putServiceRoute(
    serviceId: string,
    body: models.PutService,
    extraHttpRequestParams?: any,
  ): ng.IHttpPromise<models.GetService> {
    const localVarPath =
      this.basePath + '/api/services/{serviceId}'.replace('{' + 'serviceId' + '}', String(serviceId));

    let queryParameters: any = {};
    let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
    // verify required parameter 'serviceId' is not null or undefined
    if (serviceId === null || serviceId === undefined) {
      throw new Error('Required parameter serviceId was null or undefined when calling putServiceRoute.');
    }
    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling putServiceRoute.');
    }
    let httpRequestParams: ng.IRequestConfig = {
      method: 'PUT',
      url: localVarPath,
      data: body,
      params: queryParameters,
      headers: headerParams,
    };

    if (extraHttpRequestParams) {
      httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
    }

    return this.$http(httpRequestParams);
  }
}
